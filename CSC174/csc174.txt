/*PART 1 */
	/*Drop tables if exist*/

	DROP TABLE IF EXISTS `BUYSHARDWARE`;
	DROP TABLE IF EXISTS `BUYSPLANT`;
	DROP TABLE IF EXISTS `SELLS`;
	DROP TABLE IF EXISTS `CONTRACTOR`;
	DROP TABLE IF EXISTS `FLOWER`;
	DROP TABLE IF EXISTS `GROWER`;
	DROP TABLE IF EXISTS `HARDWARE`;
	DROP TABLE IF EXISTS `HOMEOWNER`;
	DROP TABLE IF EXISTS `PLANT`;
	DROP TABLE IF EXISTS `CUSTOMER`;
	/*CREATE HARDWARE TABLE*/

	CREATE TABLE HARDWARE(
    	SKU INT NOT NULL,
    	PRICE FLOAT NOT NULL,
    	DESCRIPTION VARCHAR(100) NOT NULL,
    	AISLE VARCHAR(10) NOT NULL,
    	PRIMARY KEY (SKU)
	);

	/*CREATE PLANT TABLE*/
	CREATE TABLE PLANT(
    	SKU INT NOT NULL,
    	PRICE FLOAT NOT NULL,
    	DESCRIPTION VARCHAR(100) NOT NULL,
    	NEEDSSUN BOOL NOT NULL,
    	CLIMATE VARCHAR(10) NOT NULL,
    	PRIMARY KEY (SKU)
	);

	/*CREATE FLOWER TABLE*/

	CREATE TABLE FLOWER(
   	SKU INT NOT NULL,
   	NAME VARCHAR(30) NOT NULL,
    	PRIMARY KEY (SKU,NAME),
   	FOREIGN KEY (SKU) REFERENCES PLANT(SKU) ON DELETE RESTRICT ON UPDATE CASCADE 
	);

	/*CREATE GROWER TABLE*/
	
	CREATE TABLE GROWER(
    	NAME VARCHAR(30) NOT NULL,
    	ADDRESS VARCHAR(30) NOT NULL,
    	PRIMARY KEY (NAME)
	);



	/*CREATE CUSTOMER TABLE */

	CREATE TABLE CUSTOMER(
 	   CID INT NOT NULL ,
  	  PRIMARY KEY (CID)
	);

	/*CREATE CONTRACTOR TABLE*/

	CREATE TABLE CONTRACTOR(
   	 LICNUM INT NOT NULL ,
    	BNAME VARCHAR(30) NOT NULL,
    	DISCOUNTPCT FLOAT,
    	CID INT NOT NULL,
    	PRIMARY KEY (LICNUM),
    	FOREIGN KEY (CID) REFERENCES CUSTOMER(CID) ON DELETE RESTRICT ON UPDATE CASCADE
	);

	/*CREATE HOMEOWNER TABLE*/

	CREATE TABLE HOMEOWNER(
  	  ID INT NOT NULL ,
   	 BIRTHDATE DATE,
   	 CID INT NOT NULL,
   	 PRIMARY KEY (ID),
   	 FOREIGN KEY (CID) REFERENCES CUSTOMER(CID) ON DELETE RESTRICT ON UPDATE CASCADE
	);
	
	/*CREATE REALTIONSHIPS*/

	/*CREATE BUYSHARDWARE TABLE*/

	CREATE TABLE BUYSHARDWARE(
    	SKU INT NOT NULL,
    	CID INT NOT NULL,
    	PRIMARY KEY (SKU,CID),
    	FOREIGN KEY (SKU) REFERENCES HARDWARE(SKU) ON DELETE RESTRICT ON UPDATE CASCADE,
    	FOREIGN KEY (CID) REFERENCES CONTRACTOR(CID) ON DELETE RESTRICT ON UPDATE CASCADE
	);
	
	/*CREATE  BUYSPLANT TABLE*/

	CREATE TABLE BUYSPLANT(
   	 SKU INT NOT NULL,
    	CID INT NOT NULL,
    	PRIMARY KEY (SKU,CID),
    	FOREIGN KEY (SKU) REFERENCES HARDWARE(SKU) ON DELETE RESTRICT ON UPDATE CASCADE,
   	 FOREIGN KEY (CID) REFERENCES HOMEOWNER(CID) ON DELETE RESTRICT ON UPDATE CASCADE
	);
	
	/*CREATE  SELLS TABLE*/
	CREATE TABLE SELLS(
    	SKU INT NOT NULL,
    	NAME VARCHAR(30) NOT NULL,
    	PRIMARY KEY (SKU,NAME),
    	FOREIGN KEY (SKU) REFERENCES HARDWARE(SKU) ON DELETE RESTRICT ON UPDATE CASCADE,
    	FOREIGN KEY (NAME) REFERENCES GROWER(NAME) ON DELETE RESTRICT ON UPDATE CASCADE
	);
/*PART 2*/
	/*ADD CONSTRAINT TO CID FOREIGN KEY IN HOMEOWNER AND CONTRACTOR IN SQL STATEMENTS IN PART 1*/
	/*
	FOREIGN KEY (CID) REFERENCES CUSTOMER(CID) ON DELETE RESTRICT ON UPDATE CASCADE
	*/
	
	
/*PART 3 */
	/*TRIGGER TO PREVENT INSERT INTO HARDWARE IF PLANT ALREADY HAVE THE SAME SKU*/
	CREATE TRIGGER BEFORE_INSERT_HARDWARE
	BEFORE INSERT
	ON HARDWARE FOR EACH ROW
	BEGIN
    	IF EXISTS(SELECT * FROM PLANT WHERE(PLANT.SKU = NEW.SKU)) THEN
      	 SIGNAL SQLSTATE '45000'
       	SET MESSAGE_TEXT = 'THE SKU VALUE YOU ARE TRYING TO INSERT IS ALREADY EXIST ON PLANT TABLE';
   	 END IF;
	END;

	/*TRIGGER TO PREVENT UPDATE IN HARDWARE IF PLANT ALREADY HAVE THE SAME SKU*/
	CREATE TRIGGER BEFORE_UPDATE_HARDWARE
	BEFORE UPDATE
	ON HARDWARE FOR EACH ROW
	BEGIN
    	IF EXISTS(SELECT * FROM PLANT WHERE(PLANT.SKU = NEW.SKU)) THEN
      	 SIGNAL SQLSTATE '45000'
       	SET MESSAGE_TEXT = 'THE SKU VALUE YOU ARE TRYING TO UPDATE IS ALREADY EXIST ON PLANT TABLE';
   	 END IF;
	END;

	/*TRIGGER TO PREVENT INSERT INTO PLANT IF HARDWARE ALREADY HAS THE SAME SKU*/
	CREATE TRIGGER BEFORE_INSERT_PLANT
	BEFORE INSERT
	ON PLANT FOR EACH ROW
	BEGIN
    	IF EXISTS(SELECT * FROM HARDWARE WHERE(HARDWARE .SKU = NEW.SKU)) THEN
      	 SIGNAL SQLSTATE '45000'
       	SET MESSAGE_TEXT = 'THE SKU VALUE YOU ARE TRYING TO INSERT IS ALREADY EXIST ON HARDWARE TABLE';
   	 END IF;
	END;
	/*TRIGGER TO PREVENT UPDATE IN PLANT IF HARDWARE ALREADY HAVE THE SAME SKU*/
	CREATE TRIGGER BEFORE_UPDATE_PLANT
	BEFORE UPDATE
	ON PLANT FOR EACH ROW
	BEGIN
    	IF EXISTS(SELECT * FROM HARDWARE WHERE(HARDWARE .SKU = NEW.SKU)) THEN
      	 SIGNAL SQLSTATE '45000'
       	SET MESSAGE_TEXT = 'THE SKU VALUE YOU ARE TRYING TO UPDATE IS ALREADY EXIST ON HARDWARE TABLE';
   	 END IF;
	END;




